(* ::Package:: *)

(* ::Input:: *)
(*EPS=10^-18;*)
(*(* Rosenbrock function *)*)
(*\[Alpha]=20;*)
(*rosenbrock[{x_,y_}]:=\[Alpha] (x^2-y)^2+(x-1)^2;*)
(**)
(*(* Quadratic function *)*)
(*func3[{x_,y_}]:=5x^2+2y^2+4x y + 4Sqrt[5](x+y)-14;*)
(**)
(*(* Function selection *)*)
(*f=rosenbrock;*)
(*(* Method selection *)*)
(*(* 1 - Cyclic coordinate descent *)*)
(*(* 2 - Pattern search (Hooke-Jeeves method) *)*)
(*(* 3 - Rosenbrock method *)*)
(*(* 4 - Powell method *)*)
(*method=1;*)
(*(* Max iterations allowed before calling Abort[] *)*)
(*maxIterations=1000;*)
(*(* Precision *)*)
(*\[CurlyEpsilon]=10^-3;*)
(*(* Starting point *)*)
(*\[GothicCapitalX]0={-3,-2};*)
(**)
(*Framed@Framed@"Function"*)
(*Row@{"f(x, y) = ",TraditionalForm@f[{x,y}]}*)
(*Framed@Framed@"Method"*)
(*methodNames={"Cyclic coordinate descent","Pattern search (Hooke-Jeeves method)", "Rosenbrock method","Powell method"};*)
(*Print@methodNames[[method]];*)
(**)
(*(* Helper functions *)*)
(*antiGradF[{x_,y_}]:=-Grad[f@{x1,x2},{x1,x2}]/.{x1->x,x2->y};*)
(*normGradF[{x_,y_}]:=Norm@antiGradF@{x,y};*)
(*hessian[{x_,y_}]:=D[f@{x1,x2},{{x1,x2},2}]/.{x1->x,x2->y};*)
(**)
(*(* Helper functions (visualization) *)*)
(*TRUEMIN=NArgMin[f[{xx,yy}],{xx,yy}];*)
(*RESIDUAL[{x_,y_}]:=Norm[TRUEMIN-{x,y}];*)
(**)
(*(* Init variables *)*)
(*\[CapitalXi]points = {\[GothicCapitalX]0};*)
(*\[CapitalXi]norms={};*)
(*\[CapitalXi]values={f@\[GothicCapitalX]0};*)
(*restart=False;*)
(*plotToPoint = 1;*)
(*MethodDivergedError=False;*)
(**)
(*(* Plot with residual norms ||w^k||, changes dynamically *)*)
(*Framed@Framed@"Residual plot"*)
(*Dynamic@ListLogPlot[EPS+\[CapitalXi]norms[[1;;plotToPoint]],*)
(*AxesLabel->{"Iteration k", "||\!\(\*SuperscriptBox[\(x\), \(k\)]\)-\!\(\*SuperscriptBox[\(x\), \(k - 1\)]\)||"},*)
(*AxesStyle->Directive[Black,Thick],*)
(*Ticks->{Automatic,{10^#,Superscript["10",#]}&/@FindDivisions[{Floor@Log10@#1,Ceiling@Log10@#2,1},8]&},*)
(*PlotStyle->{Blue,Thick},*)
(*MeshStyle->Directive[PointSize@0.02,Red],*)
(*Joined->True,*)
(*Mesh->Full,*)
(*PlotRange->{Min[\[CurlyEpsilon]/10,If[Last@\[CapitalXi]norms>0,Last@\[CapitalXi]norms/10,EPS/10]],2First@\[CapitalXi]norms},*)
(*LabelStyle->Large,*)
(*ImageSize->600,*)
(*(* y = \[CurlyEpsilon] line *)*)
(*Epilog-> {Thickness@0.004,Purple,*)
(*Line@{{1,Log@\[CurlyEpsilon]},{Length@\[CapitalXi]norms,Log@\[CurlyEpsilon]}},*)
(*Text[Style["\[CurlyEpsilon]",FontSize->24,Black],{1+0.05(Length@\[CapitalXi]norms-1),Log[2\[CurlyEpsilon]]}]}*)
(*]*)
(**)
(*(* ################################### *)*)
(*(* ##### Cyclic coordinate descent ##### *)*)
(*(* ################################### *)*)
(*MethodCyclCoordDescent:=Module[{X=\[GothicCapitalX]0,\[Alpha]1=1.,\[Alpha]2=1.,e1={1.,0.},e2={0.,1.}},*)
(*k = 0;*)
(*plotToPoint=k;*)
(**)
(*While[True,*)
(*k++;*)
(**)
(*\[Alpha]1=NArgMin[f[X+\[Kappa] e1],\[Kappa]];*)
(*X+=\[Alpha]1 e1;*)
(**)
(*\[Alpha]2=NArgMin[f[X+\[Kappa] e2],\[Kappa]];*)
(*X+=\[Alpha]2 e2;*)
(**)
(*(* Save for visualization *)*)
(*\[CapitalXi]points~AppendTo~X;*)
(*\[CapitalXi]values~AppendTo~f@X;*)
(*\[CapitalXi]norms~AppendTo~Norm[\[CapitalXi]points[[-1]]-\[CapitalXi]points[[-2]]];*)
(*plotToPoint=k;*)
(**)
(*(* Stopping criteria *)*)
(*If[(Norm[\[CapitalXi]points[[-1]]-\[CapitalXi]points[[-2]]]<\[CurlyEpsilon])&&(Norm[\[CapitalXi]values[[-1]]-\[CapitalXi]values[[-2]]]<\[CurlyEpsilon]),Break[];];*)
(**)
(*If[k>maxIterations,Print@"ERROR: MAX NUMBER OF ITERATIONS EXCEEDED";Abort[]];*)
(*If[Norm[X-\[GothicCapitalX]0]>10^5,Print@"ERROR: \:041cETHOD DIVERGES";MethodDivergedError=True;Abort[]];*)
(*];*)
(*];*)
(**)
(*(* ############################################# *)*)
(*(* ##### Pattern search (Hooke-Jeeves method) ##### *)*)
(*(* ############################################# *)*)
(*MethodHookeJeeves:=Module[{X=\[GothicCapitalX]0,\[Alpha]1=1.,\[Alpha]2=1.,e1={1.,0.},e2={0.,1.},u,\[Beta]=0.},*)
(*k = 0;*)
(*plotToPoint=k;*)
(**)
(*u=\[Alpha]1 e1 + \[Alpha]2 e2;*)
(**)
(*While[True,*)
(*k++;*)
(**)
(*\[Alpha]1=NArgMin[f[X+\[Kappa] e1],\[Kappa]];*)
(*X+=\[Alpha]1 e1;*)
(**)
(*\[Alpha]2=NArgMin[f[X+\[Kappa] e2],\[Kappa]];*)
(*X+=\[Alpha]2 e2;*)
(**)
(*u=\[Alpha]1 e1 + \[Alpha]2 e2;*)
(*\[Beta]=NArgMin[f[X+\[Kappa] u],\[Kappa]];*)
(*X+=\[Beta] u;*)
(**)
(*(* Save for visualization *)*)
(*\[CapitalXi]points~AppendTo~X;*)
(*\[CapitalXi]values~AppendTo~f@X;*)
(*\[CapitalXi]norms~AppendTo~Norm[\[CapitalXi]points[[-1]]-\[CapitalXi]points[[-2]]];*)
(*plotToPoint=k;*)
(**)
(*(* Stopping criteria *)*)
(*If[(Norm[\[CapitalXi]points[[-1]]-\[CapitalXi]points[[-2]]]<\[CurlyEpsilon])&&(Norm[\[CapitalXi]values[[-1]]-\[CapitalXi]values[[-2]]]<\[CurlyEpsilon]),Break[];];*)
(**)
(*If[k>maxIterations,Print@"ERROR: MAX NUMBER OF ITERATIONS EXCEEDED";Abort[]];*)
(*If[Norm[X-\[GothicCapitalX]0]>10^5,Print@"ERROR: METHOD DIVERGES";MethodDivergedError=True;Abort[]];*)
(*];*)
(*];*)
(**)
(*(* ########################### *)*)
(*(* ##### Rosenbrock method ##### *)*)
(*(* ########################### *)*)
(*MethodRosenbrock:=Module[{X=\[GothicCapitalX]0,\[Alpha]1=1.,\[Alpha]2=1.,e1={1.,0.},e2={0.,1.}},*)
(*k = 0;*)
(*plotToPoint=k;*)
(**)
(*While[True,*)
(*k++;*)
(**)
(*\[Alpha]1=NArgMin[f[X+\[Kappa] e1],\[Kappa]];*)
(*X+=\[Alpha]1 e1;*)
(**)
(*\[Alpha]2=NArgMin[f[X+\[Kappa] e2],\[Kappa]];*)
(*X+=\[Alpha]2 e2;*)
(*e1=\[Alpha]1 e1+\[Alpha]2 e2;{e1,e2}=Orthogonalize[{e1,e2}];*)
(**)
(*(* Save for visualization *)*)
(*\[CapitalXi]points~AppendTo~X;*)
(*\[CapitalXi]values~AppendTo~f@X;*)
(*\[CapitalXi]norms~AppendTo~Norm[\[CapitalXi]points[[-1]]-\[CapitalXi]points[[-2]]];*)
(*plotToPoint=k;*)
(**)
(*(* Stopping criteria *)*)
(*If[(Norm[\[CapitalXi]points[[-1]]-\[CapitalXi]points[[-2]]]<\[CurlyEpsilon])&&(Norm[\[CapitalXi]values[[-1]]-\[CapitalXi]values[[-2]]]<\[CurlyEpsilon]),Break[];];*)
(**)
(*If[k>maxIterations,Print@"ERROR: MAX NUMBER OF ITERATIONS EXCEEDED";Abort[]];*)
(*If[Norm[X-\[GothicCapitalX]0]>10^5,Print@"ERROR: METHOD DIVERGES";MethodDivergedError=True;Abort[]];*)
(*];*)
(*];*)
(**)
(*(* ######################## *)*)
(*(* ##### Powell method ##### *)*)
(*(* ######################## *)*)
(*MethodPowell:=Module[{X=\[GothicCapitalX]0,\[Alpha]1=1.,\[Alpha]2=1.,e1={1.,0.},e2={0.,1.},u,\[Beta]=0.,basis=0},*)
(*k = 0;*)
(*plotToPoint=k;*)
(**)
(*u=\[Alpha]1 e1 + \[Alpha]2 e2;*)
(**)
(*While[True,*)
(*k++;*)
(**)
(*\[Alpha]1=NArgMin[f[X+\[Kappa] e1],\[Kappa]];*)
(*X+=\[Alpha]1 e1;*)
(**)
(*\[Alpha]2=NArgMin[f[X+\[Kappa] e2],\[Kappa]];*)
(*X+=\[Alpha]2 e2;*)
(**)
(*u=\[Alpha]1 e1 + \[Alpha]2 e2;*)
(*\[Beta]=NArgMin[f[X+\[Kappa] u],\[Kappa]];*)
(*X+=\[Beta] u;*)
(**)
(*(* Save for visualization *)*)
(*\[CapitalXi]points~AppendTo~X;*)
(*\[CapitalXi]values~AppendTo~f@X;*)
(*\[CapitalXi]norms~AppendTo~Norm[\[CapitalXi]points[[-1]]-\[CapitalXi]points[[-2]]];*)
(*plotToPoint=k;*)
(**)
(*basis++;*)
(*e1=e2;*)
(*e2=u;*)
(*If[basis!=2,Continue[];];basis=0;*)
(**)
(*(* Stopping criteria *)*)
(*If[(Norm[\[CapitalXi]points[[-1]]-\[CapitalXi]points[[-2]]]<\[CurlyEpsilon])&&(Norm[\[CapitalXi]values[[-1]]-\[CapitalXi]values[[-2]]]<\[CurlyEpsilon]),Break[];];*)
(**)
(*If[k>maxIterations,Print@"ERROR: MAX NUMBER OF ITERATIONS EXCEEDED";Abort[]];*)
(*If[Norm[X-\[GothicCapitalX]0]>10^5,Print@"ERROR: METHOD DIVERGES";MethodDivergedError=True;Abort[]];*)
(*];*)
(*];*)
(**)
(*(* (* Launch selected method *) *)*)
(*If[method==1,MethodCyclCoordDescent];*)
(*If[method==2,MethodHookeJeeves];*)
(*If[method==3,MethodRosenbrock];*)
(*If[method==4,MethodPowell];*)
(**)
(*(* Dislay the result *)*)
(*\[GothicCapitalX]=N@Last@\[CapitalXi]points;*)
(*Column@{*)
(*Dynamic@Row@{"Display until iteration: ", plotToPoint},*)
(*Slider[Dynamic@plotToPoint,{1,Length@\[CapitalXi]norms,1}]*)
(*}*)
(*Row@{"Argmin: \[GothicCapitalX] = ",\[GothicCapitalX]}*)
(*Row@{"Number of iterations: K = ", Length@\[CapitalXi]points - 1}*)
(**)
(*(* Minimized function plot *)*)
(*Framed@Framed@"Minimized function plot (log scale)"*)
(**)
(*center=If[MethodDivergedError,\[GothicCapitalX]0,\[GothicCapitalX]];*)
(*areaSize=If[MethodDivergedError,12,8];*)
(*zOffset=1+Abs@f@center;*)
(**)
(*Plot3D[zOffset+f@{x,y},{x,center[[1]]-areaSize,center[[1]]+areaSize},{y,center[[2]]-areaSize,center[[2]]+areaSize},*)
(*ScalingFunctions->{None,None,"Log10"},*)
(*Ticks->{Automatic,Automatic,{10^#,Superscript["10",#]}&/@FindDivisions[{Floor@Log10@#1,Ceiling@Log10@#2,1},8]&},*)
(*PlotRange->Full,*)
(*ColorFunction->Function[{x,y,z},Hue[.65(1-z)]],*)
(*AxesStyle->Black,*)
(*BoxStyle->Black,*)
(*ImageSize->400*)
(*]*)
(**)
(*(* Contour lines *)*)
(*Framed@Framed@"Contour lines"*)
(*contourToPoint = Length@\[CapitalXi]points;*)
(*Dynamic@ContourPlot[Log10[zOffset+f@{x,y}],{x,center[[1]]-areaSize/zoom,center[[1]]+areaSize/zoom},{y,center[[2]]-areaSize/zoom,center[[2]]+areaSize/zoom},*)
(*ColorFunction->Function[{z},Hue[.65(1-z)]],*)
(*Contours->30,*)
(*ContourStyle->Black,*)
(*ImageSize->400,*)
(*(* display the process *)*)
(*Epilog->{Black,Thickness@0.002,Dynamic@Table[Arrow@\[CapitalXi]points[[i-1;;i]],{i,2,contourToPoint}],Red,PointSize@0.015,Dynamic@Point@\[CapitalXi]points[[1;;contourToPoint]],PointSize@0.02,Point@Last@\[CapitalXi]points}*)
(*]*)
(*Column@{*)
(*Dynamic@Row@{"Displayed iterations: ",contourToPoint-1},*)
(*Slider[Dynamic@contourToPoint,{1,Length@\[CapitalXi]points,1}],*)
(*Dynamic@Row@{"Zoom: ",zoom},*)
(*Slider[Dynamic@zoom,{1,20,0.01}]*)
(*}*)