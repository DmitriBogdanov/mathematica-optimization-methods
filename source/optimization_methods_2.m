(* ::Package:: *)

(* ::Input:: *)
(*(* Rosenbrock function *)*)
(*\[Alpha]=1;*)
(*rosenbrock[{x_,y_}]:=\[Alpha] (x^2-y)^2+(x-1)^2;*)
(**)
(*(* Quadratic function *)*)
(*func3[{x_,y_}]:=6x^2+3y^2-4x y + 4Sqrt[5](x+2y)+22;*)
(**)
(*(* Selection of function and method *)*)
(*f=rosenbrock;*)
(*steepestDescent=True;*)
(*maxIterations=1000;*)
(**)
(*Framed@Framed@"Function"*)
(*Row@{"f(x, y) = ",TraditionalForm@f[{x,y}]}*)
(*Framed@Framed@"Method"*)
(*Print@If[steepestDescent,"Steepest descent method","Gradient descent with geometric step reduction"];*)
(**)
(*(* Helper functions *)*)
(*antiGradF[{x_,y_}]:=-Grad[f@{x1,x2},{x1,x2}]/.{x1->x,x2->y};*)
(*normGradF[{x_,y_}]:=Norm@antiGradF@{x,y};*)
(**)
(*(* Consts *)*)
(*\[CurlyEpsilon]=10^-2;*)
(*MIN0={-1, -2};*)
(**)
(*(* Init variables *)*)
(*MIN=MIN0;*)
(*points={MIN0};*)
(*norms={normGradF@MIN0};*)
(*valuesF={f@MIN0};*)
(*arrayK={1};*)
(*plotK = 1;*)
(**)
(*(* Plot with ||w^k|| norms, changes dynamically *)*)
(*dynamicNormPlot=Dynamic@ListLogPlot[norms[[1;;plotK]],*)
(*AxesLabel->{"Number of iteration k", "||\!\(\*SuperscriptBox[\(w\), \(k\)]\)||"},*)
(*AxesStyle->Directive[Black,Thick],*)
(*Ticks->{Automatic,{10^#,Superscript["10",#]}&/@FindDivisions[{Floor@Log10@#1,Ceiling@Log10@#2,1},8]&},*)
(*PlotStyle->{Blue,Thick},*)
(*MeshStyle->Directive[PointSize@0.02,Red],*)
(*Joined->True,*)
(*Mesh->Full,*)
(*PlotRange->{Min[\[CurlyEpsilon]/10,norms[[plotK]]/10],2First@norms},*)
(*LabelStyle->Large,*)
(*ImageSize->600,*)
(*(* y = \[CurlyEpsilon] line *)*)
(*Epilog-> {Thickness@0.004,Purple,*)
(*Line@{{1,Log@\[CurlyEpsilon]},{Length@norms,Log@\[CurlyEpsilon]}},*)
(*Text[Style["\[CurlyEpsilon]",FontSize->24,Black],{1+0.05(Length@norms-1),Log[2\[CurlyEpsilon]]}]}*)
(**)
(*];*)
(**)
(*(* Depending on selected method choose how to compute w^(k+1) *)*)
(*nextKSteepest[w_,min_]:=NArgMin[f[min+k antiGradF@min],k];*)
(*\[Gamma]=0.5;*)
(*newK=First@arrayK;*)
(*nextKDivide[w_,min_]:=While[True,*)
(*If[Length@valuesF<2,newK=nextKSteepest[w,min];Return@newK];*)
(*If[valuesF[[-2]]-valuesF[[-1]]>0.5newK (normGradF@min)^2,Return@newK,newK*=\[Gamma]]*)
(*];*)
(**)
(*nextK=If[steepestDescent,nextKSteepest,nextKDivide];*)
(**)
(*(* Gradient descent method *)*)
(*Framed@Framed@"Residual plot"*)
(*dynamicNormPlot*)
(**)
(*While[Last@norms>=\[CurlyEpsilon],*)
(*arrayK~AppendTo~nextK[Last@arrayK,MIN];*)
(*MIN+=Last@arrayK antiGradF@MIN;*)
(*points~AppendTo~MIN;*)
(*valuesF~AppendTo~f@MIN;*)
(*norms~AppendTo~normGradF@MIN;*)
(*plotK=Length@arrayK;*)
(*If[plotK>maxIterations,Print@"ERROR: MAX NUMBER OF ITERATIONS EXCEEDED";Abort[]];*)
(*];*)
(**)
(*(* Display the result *)*)
(*Column@{*)
(*Dynamic@Row@{"Display until iteration: ", plotK-1},*)
(*Slider[Dynamic@plotK,{1,Length@arrayK,1}]*)
(*}*)
(*Row@{"Argmin: MIN = ",MIN}*)
(*Row@{"Number of iterations: K - 1 = ", Length@points - 1}*)
(**)
(*(* Minimized function plot *)*)
(*Framed@Framed@"Minimized function plot (log scale)"*)
(**)
(*areaSize=8;*)
(*zOffset=1+Abs@f@MIN;*)
(*Plot3D[zOffset+f@{x,y},{x,MIN[[1]]-areaSize,MIN[[1]]+areaSize},{y,MIN[[2]]-areaSize,MIN[[2]]+areaSize},*)
(*ScalingFunctions->{None,None,"Log10"},*)
(*Ticks->{Automatic,Automatic,{10^#,Superscript["10",#]}&/@FindDivisions[{Floor@Log10@#1,Ceiling@Log10@#2,1},8]&},*)
(*PlotRange->Full,*)
(*ColorFunction->Function[{x,y,z},Hue[.65(1-z)]],*)
(*AxesStyle->Black,*)
(*BoxStyle->Black,*)
(*ImageSize->400*)
(*]*)
(**)
(*(* Contour lines *)*)
(*Framed@Framed@"Contour lines"*)
(**)
(*Dynamic@ContourPlot[Log10[zOffset+f@{x,y}],{x,MIN[[1]]-areaSize/zoom,MIN[[1]]+areaSize/zoom},{y,MIN[[2]]-areaSize/zoom,MIN[[2]]+areaSize/zoom},*)
(*ColorFunction->Function[{z},Hue[.65(1-z)]],*)
(*Contours->20,*)
(*ContourStyle->Black,*)
(*ImageSize->400,*)
(*(* display the process *)*)
(*Epilog->{Black,Thickness@0.002,Dynamic@Table[Arrow@points[[i-1;;i]],{i,2,contourK}],Red,PointSize@0.015,Dynamic@Point@points[[1;;contourK]],PointSize@0.02,Point@Last@points}*)
(*]*)
(*Column@{*)
(*Dynamic@Row@{"Displayed iterations: ",contourK-1},*)
(*Slider[Dynamic@contourK,{1,Length@arrayK,1}],*)
(*Dynamic@Row@{"Zoom: ",zoom},*)
(*Slider[Dynamic@zoom,{1,10,0.01}]*)
(*}*)



